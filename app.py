import re
from io import StringIO

import streamlit as st
from annotated_text import annotated_text

from src import check_paragraphs_not_start_with_symbols, check_headers, check_paragraphs_start, check_article_numbering, find_incorrect_dates, highlight_errors, remove_footnotes, title_check, display_errors_with_streamlit, display_title_check_res

st.set_page_config(
    page_title="LawTechChecker",
    page_icon="üìä",
    layout="wide",
    initial_sidebar_state="expanded",
)

# –°–æ–∑–¥–∞–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö session state
if "input_text" not in st.session_state:
    st.session_state["input_text"] = ""

if "output_text" not in st.session_state:
    st.session_state["output_text"] = ""

if "title_check_res" not in st.session_state:
    st.session_state["title_check_res"] = ""

if "errors_in_text" not in st.session_state:
    st.session_state["errors_in_text"] = []

if "output_text_with_errors" not in st.session_state:
    st.session_state["output_text_with_errors"] = []

# Functions


def reset_session_state():
    st.session_state["input_text"] = ""
    st.session_state["output_text"] = ""
    st.session_state["title_check_res"] = ""
    st.session_state["errors_in_text"] = []
    st.session_state["output_text_with_errors"] = []


def read_text_file(uploaded_file):
    stringio = StringIO(uploaded_file.getvalue().decode("utf-8"))
    # To read file as string:
    return stringio.read()


# Sidebar
with st.sidebar:
    st.title("üóÇ –í–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö")

    tab1, tab2 = st.tabs(["üìÅ –î–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–∞–π–ª–∞", "üìù –í–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é"])
    with tab1:
        # –í–∫–ª–∞–¥–∫–∞ —Å –∑–∞–≥—Ä—É–∑–∫–æ–π —Ñ–∞–π–ª–∞, –≤—ã–±–æ—Ä–æ–º –ø–æ—Ä–æ–≥–∞ –∏ –∫–Ω–æ–ø–∫–æ–π –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è (–≤–∫–ª–∞–¥–∫–∞ 1)
        uploaded_file = st.file_uploader(
            "–í—ã–±—Ä–∞—Ç—å CSV —Ñ–∞–π–ª", type=["txt", "pdf"], on_change=reset_session_state
        )
        if uploaded_file is not None:
            check_buton = st.button(
                "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞ –æ—à–∏–±–∫–∏",
                type="primary",
                use_container_width=True,
                key="button1",
            )
            st.session_state["input_text"] = read_text_file(uploaded_file)
            if check_buton:
                # –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ session state
                st.session_state["output_text"] = remove_footnotes(
                    st.session_state["input_text"]
                )
                st.session_state["errors_in_text"] = find_incorrect_dates(
                    st.session_state["output_text"]
                )
                st.session_state["errors_in_text"] = st.session_state["errors_in_text"] + check_article_numbering(
                    st.session_state["output_text"]
                )
                # check_paragraphs_start, check_headers
                # st.session_state["errors_in_text"] = st.session_state["errors_in_text"] + check_paragraphs_start(
                #     st.session_state["output_text"]
                # )
                # st.session_state["errors_in_text"] = st.session_state["errors_in_text"] + check_headers(
                #     st.session_state["output_text"]
                # )
                # error place
                # check_paragraphs_not_start_with_symbols
                st.session_state["errors_in_text"] = st.session_state["errors_in_text"] + check_paragraphs_not_start_with_symbols(
                    st.session_state["output_text"]
                )
                st.session_state["output_text_with_errors"] = highlight_errors(
                    st.session_state["output_text"], st.session_state["errors_in_text"]
                )
                # uncomment this
                st.session_state["title_check_res"] = title_check(
                    st.session_state["input_text"][:1000])

# Main section start
# –û—Å–Ω–æ–≤–Ω–æ–π –±–ª–æ–∫
# st.image('https://miro.medium.com/v2/resize:fit:1400/1*WqId29D5dN_8DhiYQcHa2w.png', width=400)
st.title("–ü—Ä–æ–≤–µ—Ä–∫–∞ —é—Ä. —Ç–µ—Ö–Ω–∏–∫–∏")

# with st.expander("–û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞"):
#     st.write(
#         """
#     –í –¥–∞–Ω–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ –º—ã —Ä–∞—Å—Å–º–æ—Ç—Ä–∏–º –∑–∞–¥–∞—á—É –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç—Ç–æ–∫–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤.
#     –î–ª—è —ç—Ç–æ–≥–æ –º—ã –±—É–¥–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–∞—Ç–∞—Å–µ—Ç –∏–∑ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤.
#     –î–∞—Ç–∞—Å–µ—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–ª–∏–µ–Ω—Ç–∞—Ö, –∫–æ—Ç–æ—Ä—ã–µ —É–∂–µ —É—à–ª–∏ –∏–ª–∏ –æ—Å—Ç–∞–ª–∏—Å—å –≤ –∫–æ–º–ø–∞–Ω–∏–∏.
#     –ù–∞—à–∞ –∑–∞–¥–∞—á–∞ - –ø–æ—Å—Ç—Ä–æ–∏—Ç—å –º–æ–¥–µ–ª—å, –∫–æ—Ç–æ—Ä–∞—è –±—É–¥–µ—Ç –ø—Ä–µ–¥—Å–∫–∞–∑—ã–≤–∞—Ç—å –æ—Ç—Ç–æ–∫ –∫–ª–∏–µ–Ω—Ç–æ–≤.
#     """
#     )

if (
    st.session_state["output_text"] != ""
    and st.session_state["output_text_with_errors"] != []
):
    st.divider()
    st.subheader("–ù–∞–π–¥–µ–Ω–Ω—ã–µ –æ—à–∏–±–∫–∏:")
    # st.json(st.session_state["errors_in_text"])
    display_errors_with_streamlit(st.session_state["errors_in_text"])

    if st.session_state["title_check_res"] != "":
        st.divider()
        display_title_check_res(st.session_state["title_check_res"])
        st.divider()

    col1, col2 = st.columns(2, gap="medium")
    with col1:
        st.subheader("–í—Ö–æ–¥–Ω–æ–π —Ç–µ–∫—Å—Ç")
        st.write(st.session_state["input_text"])
    with col2:
        st.subheader("–†–µ–∑—É–ª—å—Ç–∞—Ç")
        # st.write(st.session_state['output_text'])
        annotated_text(*st.session_state["output_text_with_errors"])
